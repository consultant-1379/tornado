heat_template_version: queens

description: >
  Controller pre-configuration hook

parameters:
  server:
    type: string
  DeployIdentifier:
    type: string
  GlanceNfsMount:
    type: string
  GlanceNfsOptions:
    type: string
  GlanceNfsFirstServer:
    type: string
  GlanceNfsSecondServer:
    type: string
  GlanceNfsEnableTrunking:
    type: string
  GlanceStagingNfsMount:
    type: string
  GlanceStagingNfsOptions:
    type: string
  GlanceStagingNfsFirstServer:
    type: string
  GlanceStagingNfsSecondServer:
    type: string
  GlanceStagingNfsEnableTrunking:
    type: string
  GnocchiNfsMount:
    type: string
  GnocchiNfsOptions:
    type: string
  GnocchiNfsFirstServer:
    type: string
  GnocchiNfsSecondServer:
    type: string
  GnocchiNfsEnableTrunking:
    type: string

resources:
  GlanceNFS:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        - name: DeployIdentifier
        - name: NfsMount
        - name: NfsOptions
        - name: NfsFirstServer
        - name: NfsSecondServer
        - name: NfsEnableTrunking
      config: {get_file: scripts/nfs.sh}
  GlanceNFSDeployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      actions: ['CREATE'] # Do this on CREATE only
      server: {get_param: server}
      config: {get_resource: GlanceNFS}
      input_values:
        deploy_identifier: {get_param: DeployIdentifier}
        NfsMount: {get_param: GlanceNfsMount}
        NfsOptions: {get_param: GlanceNfsOptions}
        NfsFirstServer: {get_param: GlanceNfsFirstServer}
        NfsSecondServer: {get_param: GlanceNfsSecondServer}
        NfsEnableTrunking: {get_param: GlanceNfsEnableTrunking}

  GlanceStagingNFS:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        - name: DeployIdentifier
        - name: NfsMount
        - name: NfsOptions
        - name: NfsFirstServer
        - name: NfsSecondServer
        - name: NfsEnableTrunking
      config: {get_file: scripts/nfs.sh}
  GlanceStagingNFSDeployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      actions: ['CREATE'] # Do this on CREATE only
      server: {get_param: server}
      config: {get_resource: GlanceStagingNFS}
      input_values:
        deploy_identifier: {get_param: DeployIdentifier}
        NfsMount: {get_param: GlanceStagingNfsMount}
        NfsOptions: {get_param: GlanceStagingNfsOptions}
        NfsFirstServer: {get_param: GlanceStagingNfsFirstServer}
        NfsSecondServer: {get_param: GlanceStagingNfsSecondServer}
        NfsEnableTrunking: {get_param: GlanceStagingNfsEnableTrunking}

  GnocchiNFS:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        - name: DeployIdentifier
        - name: NfsMount
        - name: NfsOptions
        - name: NfsFirstServer
        - name: NfsSecondServer
        - name: NfsEnableTrunking
      config: {get_file: scripts/nfs.sh}
  GnocchiNFSDeployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      actions: ['CREATE'] # Do this on CREATE only
      server: {get_param: server}
      config: {get_resource: GnocchiNFS}
      input_values:
        deploy_identifier: {get_param: DeployIdentifier}
        NfsMount: {get_param: GnocchiNfsMount}
        NfsOptions: {get_param: GnocchiNfsOptions}
        NfsFirstServer: {get_param: GnocchiNfsFirstServer}
        NfsSecondServer: {get_param: GnocchiNfsSecondServer}
        NfsEnableTrunking: {get_param: GnocchiNfsEnableTrunking}

  Multipathd:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        - name: DeployIdentifier
      config: {get_file: scripts/multipathd.sh}
  MultipathdDeployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      actions: ['CREATE', 'UPDATE'] # Do this on CREATE and UPDATE as well
      server: {get_param: server}
      config: {get_resource: Multipathd}
      input_values:
        deploy_identifier: {get_param: DeployIdentifier}

  LVMGlobalFilter:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        - name: DeployIdentifier
      config: {get_file: scripts/lvm_global_filter.sh}
  LVMGlobalFilterDeployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      actions: ['CREATE', 'UPDATE'] # Do this on CREATE and UPDATE as well
      server: {get_param: server}
      config: {get_resource: LVMGlobalFilter}
      input_values:
        deploy_identifier: {get_param: DeployIdentifier}

outputs:
  deploy_stdout:
    description: Deployment reference, used to trigger puppet apply on changes
    value: {get_attr: [GlanceNFSDeployment, deploy_stdout]}
