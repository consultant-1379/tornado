heat_template_version: queens

description: >
  Compute pre-configuration hook

parameters:
  server:
    type: string
  DeployIdentifier:
    type: string
  NovaNfsMount:
    type: string
  NovaNfsOptions:
    type: string
  NovaNfsFirstServer:
    type: string
  NovaNfsSecondServer:
    type: string
  NovaNfsEnableTrunking:
    type: string

resources:
  NovaNFS:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        - name: DeployIdentifier
        - name: NfsMount
        - name: NfsOptions
        - name: NfsFirstServer
        - name: NfsSecondServer
        - name: NfsEnableTrunking
      config: {get_file: scripts/nfs.sh}
  NovaNFSDeployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      actions: ['CREATE'] # Do this on CREATE only
      server: {get_param: server}
      config: {get_resource: NovaNFS}
      input_values:
        deploy_identifier: {get_param: DeployIdentifier}
        NfsMount: {get_param: NovaNfsMount}
        NfsOptions: {get_param: NovaNfsOptions}
        NfsFirstServer: {get_param: NovaNfsFirstServer}
        NfsSecondServer: {get_param: NovaNfsSecondServer}
        NfsEnableTrunking: {get_param: NovaNfsEnableTrunking}

  KSM:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        - name: DeployIdentifier
      config: {get_file: scripts/ksm.sh}
  KSMDeployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      actions: ['CREATE', 'UPDATE'] # Do this on CREATE and UPDATE as well
      server: {get_param: server}
      config: {get_resource: KSM}
      input_values:
        deploy_identifier: {get_param: DeployIdentifier}

  Multipathd:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        - name: DeployIdentifier
      config: {get_file: scripts/multipathd.sh}
  MultipathdDeployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      actions: ['CREATE', 'UPDATE'] # Do this on CREATE and UPDATE as well
      server: {get_param: server}
      config: {get_resource: Multipathd}
      input_values:
        deploy_identifier: {get_param: DeployIdentifier}

  vHostNetZeroCopy:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        - name: DeployIdentifier
      config: {get_file: scripts/vhost_net_zero_copy.sh}
  vHostNetZeroCopyDeployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      actions: ['CREATE', 'UPDATE'] # Do this on CREATE and UPDATE as well
      server: {get_param: server}
      config: {get_resource: vHostNetZeroCopy}
      input_values:
        deploy_identifier: {get_param: DeployIdentifier}

  LVMGlobalFilter:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        - name: DeployIdentifier
      config: {get_file: scripts/lvm_global_filter.sh}
  LVMGlobalFilterDeployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      actions: ['CREATE', 'UPDATE'] # Do this on CREATE and UPDATE as well
      server: {get_param: server}
      config: {get_resource: LVMGlobalFilter}
      input_values:
        deploy_identifier: {get_param: DeployIdentifier}

outputs:
  deploy_stdout:
    description: Deployment reference, used to trigger puppet apply on changes
    value: {get_attr: [NovaNFSDeployment, deploy_stdout]}
